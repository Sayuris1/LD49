local path = require "modules.path"
local utils = require "modules.utils"
local camera = require "orthographic.camera"

enemies = {}
current_player = 0

function notiy_next(player_tile)
	current_player = current_player + 1
	if enemies[current_player] then
		msg.post(enemies[current_player], utils.pre_hash("play"), {player_tile = player_tile})
	else
		msg.post("/player#script", utils.pre_hash("play"))
	end
end

function init(self)
	math.randomseed(os.clock())

	msg.post(".", "acquire_input_focus")

	local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
	self.current_tile = {x = tile_x, y = tile_y}

	path.setup_astar()
	path.underline_nears(self.current_tile, 4)
end

function on_message(self, message_id, message, sender)
	if message_id == utils.pre_hash("play") then
		current_player = 0
		path.underline_nears(self.current_tile, 4)
	end
end

function on_input(self, action_id, action)
	if action_id == utils.pre_hash("touch") and action.pressed and current_player == 0 then
		local world_pos = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
		local clicked_tile = {}; clicked_tile.x, clicked_tile.y = utils.world_to_tile(world_pos, 32)
		if path.is_near(clicked_tile) then
			self.current_tile = clicked_tile

			local new_pos_x, new_pos_y = utils.tile_to_world(self.current_tile, 32)
			go.set_position(vmath.vector3(new_pos_x, new_pos_y, 1))

			--path.underline_nears(self.current_tile, 5)
			path.reset_underline()

			notiy_next(self.current_tile)
		end
	end
end