local path = require "modules.path"
local utils = require "modules.utils"
local camera = require "orthographic.camera"

enemies = {}
current_player = 0
next_wave = -1
tuto = 1

function notify_next()
	if enemies[current_player] then
		msg.post(enemies[current_player], utils.pre_hash("play"))
	else
		msg.post("/player#script", utils.pre_hash("play"))
	end

	if not tuto then
		local is_chest = math.random(10)
		if is_chest == 10 then
			local pos_x, pos_y = utils.tile_to_world({x = math.random(14), y = math.random(14)}, 32)
			factory.create("/player#chest_factory", vmath.vector3(pos_x, pos_y, 3))
		end

		if next_wave == 0 then
			local pos_x, pos_y = utils.tile_to_world({x = math.random(14), y = math.random(14)}, 32)
			factory.create("/player#bat_factory", vmath.vector3(pos_x, pos_y, 1))
			local pos_x, pos_y = utils.tile_to_world({x = math.random(14), y = math.random(14)}, 32)
			factory.create("/player#golem_factory", vmath.vector3(pos_x, pos_y, 1), nil, nil, vmath.vector3(1.5))
			next_wave = 5
		end
	end
end

function init(self)
	math.randomseed(os.clock())

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(27 / 255, 38 / 225, 50 / 225, 1) } )

	local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
	player_tile = {x = tile_x, y = tile_y}

	local pos_x, pos_y = utils.tile_to_world(player_tile, 32)
	go.set_position(vmath.vector3(pos_x, pos_y, 3))

	path.setup_astar()
	path.underline_nears(player_tile, 4, 5, 1)

	self.hp = 6
	self.knife = 0
	self.restart = false

	msg.post("/ui#ui", utils.pre_hash("knife"), {self.knife})
	msg.post("/map#label", "disable")
end

function on_message(self, message_id, message, sender)
	if message_id == utils.pre_hash("play") then
		current_player = 0
		path.underline_nears(player_tile, 4, 5, 1)
	elseif message_id == utils.pre_hash("trigger_response") then
		if message.other_group == utils.pre_hash("chest") then
			self.knife = self.knife + 5
			msg.post("/ui#ui", utils.pre_hash("knife"), {self.knife})
			go.delete(message.other_id)
		elseif message.other_group == utils.pre_hash("bullet_1") then
			self.hp = self.hp - 1
			msg.post("/ui#ui", utils.pre_hash("hp"), {self.hp})
			if self.hp == 0 then
				sprite.play_flipbook("#sprite", utils.pre_hash("pdead"), function ()
					msg.post("/map#label", "enable")
					self.restart = true
				end)
			end
		elseif message.other_group == utils.pre_hash("trigger") and message.enter then
			if tuto == 1 then
				tuto = tuto + 1
				go.animate("/tuto2", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0), go.EASING_LINEAR, 2)
				go.animate("/tuto1", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-480, -480, 0), go.EASING_LINEAR, 2, 0, function() go.delete("/tuto1", true); end)
				go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(16, 16, 3), go.EASING_LINEAR, 2, 0, function() 
					path.active = "/tuto2#map"

					local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
					player_tile = {x = tile_x, y = tile_y}

					sprite.play_flipbook("#sprite", utils.pre_hash("player"))
					path.reset_underline(1)

					local pos_x, pos_y = utils.tile_to_world({x = 14, y = 10}, 32)
					factory.create("/player#bat_factory", vmath.vector3(pos_x, pos_y, 1))

					notify_next()
					path.reset_map()
				end)
			elseif tuto == 2 then
				tuto = tuto + 1
				go.animate("/tuto3", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0), go.EASING_LINEAR, 2)
				go.animate("/tuto2", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-480, -480, 0), go.EASING_LINEAR, 2, 0, function() go.delete("/tuto2", true); end)
				go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(16, 16, 3), go.EASING_LINEAR, 2, 0, function() 
					path.active = "/tuto3#map"

					local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
					player_tile = {x = tile_x, y = tile_y}

					sprite.play_flipbook("#sprite", utils.pre_hash("player"))
					path.reset_underline(1)

					local pos_x, pos_y = utils.tile_to_world({x = 12, y = 6}, 32)
					factory.create("/player#golem_factory", vmath.vector3(pos_x, pos_y, 1))

					notify_next()

					path.reset_map()
				end)
			elseif tuto == 3 then
				tuto = nil
				go.animate("/map", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0), go.EASING_LINEAR, 2)
				go.animate("/tuto3", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(-480, -480, 0), go.EASING_LINEAR, 2, 0, function() go.delete("/tuto3", true); end)
				go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(16, 16, 3), go.EASING_LINEAR, 2, 0, function() 
					path.active = "/map#map"
					next_wave = 1

					local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
					player_tile = {x = tile_x, y = tile_y}

					sprite.play_flipbook("#sprite", utils.pre_hash("player"))
					path.reset_underline(1)

					notify_next()

					path.reset_map()
				end)
			end
		end
	end
end

local function walk(current_tile, path_table, path_index, current_index)
	if current_index <= path_index then
		local new_pos_x, new_pos_y = utils.tile_to_world(path_table[current_index], 32)
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(new_pos_x, new_pos_y, 3),
			go.EASING_LINEAR, 0.5, 0, function() walk (current_tile, path_table, path_index, current_index + 1); end)

		if current_index ~= path_index then
			path.damage_same(path_table[current_index])
		end
	else
		sprite.play_flipbook("#sprite", utils.pre_hash("player"))
		path.reset_underline(1)

		next_wave = next_wave - 1
		notify_next()

		for i, v in ipairs(path.destroyed) do
			v.turn = v.turn - 1
			if v.turn == 0 then
				tilemap.set_tile(path.active, "1", v.x, v.y, 1)
				table.remove(path.destroyed, i)

				path.reset_map()
			end
		end
	end
end

function on_input(self, action_id, action)
	utils.cursor_update(action, action_id)

	if action.pressed and current_player == 0 then
		if action_id == utils.pre_hash("touch_2") then
			local world_pos = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
			local clicked_tile = {}; clicked_tile.x, clicked_tile.y = utils.world_to_tile(world_pos, 32)
			clicked_tile.x = clicked_tile.x + 1
			clicked_tile.y = clicked_tile.y + 1

			if path.is_near(clicked_tile) then
				current_player = current_player + 1

				local result, size, total_cost, path_table = path.find_path(player_tile, clicked_tile)
				if result == 0 then
					sprite.play_flipbook("#sprite", utils.pre_hash("pwalk"))
					path.damage_same(player_tile)
					walk(player_tile, path_table, #path_table, 1)
					player_tile = clicked_tile
				else
					next_wave = next_wave - 1
					path.reset_underline(1)
					notify_next()
				end
			end

		elseif action_id == utils.pre_hash("touch") and self.knife > 0 then
			local world_pos = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
			local clicked_tile = {}; clicked_tile.x, clicked_tile.y = utils.world_to_tile(world_pos, 32)
			clicked_tile.x = clicked_tile.x + 1
			clicked_tile.y = clicked_tile.y + 1

			local rotation, speed
			if clicked_tile.x < player_tile.x then
				rotation = vmath.quat_rotation_z(math.pi / 2)
				speed = vmath.vector3(-500, 0, 0)
			elseif clicked_tile.x > player_tile.x then
				rotation = vmath.quat_rotation_z(-math.pi / 2)
				speed = vmath.vector3(500, 0, 0)
			elseif clicked_tile.y > player_tile.y then
				rotation = vmath.quat_rotation_z(0)
				speed = vmath.vector3(0, 500, 0)
			else
				rotation = vmath.quat_rotation_z(math.pi)
				speed = vmath.vector3(0, -500, 0)
			end

			self.knife = self.knife - 1
			msg.post("/ui#ui", utils.pre_hash("knife"), {self.knife})
			factory.create("#knife_factory", go.get_position(), rotation, {speed = speed})
		end
		if action_id == utils.pre_hash("restart") and self.restart then
			self.restart = false
			self.score = 0
			self.hp = 6
			self.knife = 5

			msg.post("/ui#ui", utils.pre_hash("hp"), {self.hp})
			msg.post("/ui#ui", utils.pre_hash("knife"), {self.knife})
			msg.post("/ui#ui", utils.pre_hash("reset"))

			current_player = 0
			next_wave = 2

			for i, v in ipairs(enemies) do
				go.delete(v)
			end

			enemies = {}


			msg.post("/map#label", "disable")
			sprite.play_flipbook("#sprite", utils.pre_hash("player"))

			notify_next()
		end
	end
end