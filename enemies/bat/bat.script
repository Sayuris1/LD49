local utils = require "modules.utils"
local path = require "modules.path"

function init(self)
	local tile_x, tile_y = utils.world_to_tile(go.get_position(), 32)
	self.current_tile = {x = tile_x, y = tile_y}
	self.moveable = {{}}

	self.healt = 1

	enemies[#enemies + 1] = msg.url()
end

function final(self)
	local url = msg.url()

	for i, v in ipairs(enemies) do
		if v == url then
			table.remove(enemies, i)

			return
		end
	end
end

function set_pos(current_tile)
	local world_pos = {}; world_pos.x, world_pos.y = utils.tile_to_world(current_tile, 32)
	go.set_position(vmath.vector3(world_pos.x, world_pos.y, 1))
end

function on_message(self, message_id, message, sender)
	if message_id == utils.pre_hash("play") then
		current_player = current_player + 1

		local distance = {}
		distance.x = self.current_tile.x - player_tile.x
		distance.y = self.current_tile.y - player_tile.y

		if math.abs(distance.x) <= 2 then
			self.current_tile.x = self.current_tile.x - distance.x
			local world_x, world_y = utils.tile_to_world(self.current_tile, 32)
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(world_x, world_y, 1), go.EASING_LINEAR,
				0.5, 0, function() 
					set_pos(self.current_tile)

					local rotation, speed
					if distance.y < 0 then
						rotation = vmath.quat_rotation_z(0)
						speed = vmath.vector3(0, 500, 0)
					else
						rotation = vmath.quat_rotation_z(math.pi)
						speed = vmath.vector3(0, -500, 0)
					end

					factory.create("#knife_factory", go.get_position(), rotation, {speed = speed})
				end)
		elseif math.abs(distance.y) <= 2 then
			self.current_tile.y = self.current_tile.y - distance.y
			local world_x, world_y = utils.tile_to_world(self.current_tile, 32)
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(world_x, world_y, 1), go.EASING_LINEAR,
				0.5, 0, function() 
					local rotation, speed
					if distance.x < 0 then
						rotation = vmath.quat_rotation_z(-math.pi / 2)
						speed = vmath.vector3(500, 0, 0)
					else
						rotation = vmath.quat_rotation_z(math.pi / 2)
						speed = vmath.vector3(-500, 0, 0)
					end

					factory.create("#knife_factory", go.get_position(), rotation, {speed = speed})
				end)
		else
			local direction = math.random(2)
			if direction == 1 then
				self.current_tile.x = self.current_tile.x - (3 * utils.sign(distance.x))
				local world_x, world_y = utils.tile_to_world(self.current_tile, 32)
				go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(world_x, world_y, 1), go.EASING_LINEAR, 0.5, 0, notify_next)
			else
				self.current_tile.y = self.current_tile.y - (3 * utils.sign(distance.y))
				local world_x, world_y = utils.tile_to_world(self.current_tile, 32)
				go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(world_x, world_y, 1), go.EASING_LINEAR, 0.5, 0, notify_next)
			end
		end


	elseif message_id == utils.pre_hash("trigger_response") then
		if message.other_group == utils.pre_hash("bullet_2") then
			self.healt = self.healt - 1
			if self.healt <= 0 then
				sprite.play_flipbook("#sprite", utils.pre_hash("bdead"), function() go.delete() end)
			end
		end

	elseif message_id == utils.pre_hash("cursor_over") then
		self.moveable[1].x, self.moveable[1].y = self.current_tile.x, self.current_tile.y
		for i = 2, 4 do
			self.moveable[i] = {}
			self.moveable[i].x = self.moveable[i - 1].x - 1
			self.moveable[i].y = self.moveable[i - 1].y
		end

		self.moveable[5] = {}
		self.moveable[5].x, self.moveable[5].y = self.current_tile.x + 1, self.current_tile.y
		for i = 6, 7 do
			self.moveable[i] = {}
			self.moveable[i].x = self.moveable[i - 1].x + 1
			self.moveable[i].y = self.moveable[i - 1].y
		end

		self.moveable[8] = {}
		self.moveable[8].x, self.moveable[8].y = self.current_tile.x, self.current_tile.y + 1
		for i = 9, 10 do
			self.moveable[i] = {}
			self.moveable[i].y = self.moveable[i - 1].y + 1
			self.moveable[i].x = self.moveable[i - 1].x 
		end

		self.moveable[11] = {}
		self.moveable[11].x, self.moveable[11].y = self.current_tile.x, self.current_tile.y - 1
		for i = 12, 13 do
			self.moveable[i] = {}
			self.moveable[i].y = self.moveable[i - 1].y - 1
			self.moveable[i].x = self.moveable[i - 1].x 
		end

		for i, v in ipairs(self.moveable) do
			tilemap.set_tile("/map#map", "2", v.x, v.y, 6)
		end
	elseif message_id == utils.pre_hash("cursor_out") then
		for i, v in ipairs(self.moveable) do
			tilemap.set_tile("/map#map", "2", v.x, v.y, 16)
		end

		for i, v in ipairs(path.nears[1]) do
            tilemap.set_tile("/map#map", "2", v.x, v.y, 5)
		end

		self.moveable = {{}}
	end
end